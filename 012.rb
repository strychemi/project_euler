#Highly divisible triangular number

=begin
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end

def find_trinum(divisor_limit)
  i = 1
  value = i * (i + 1)/2

  while divisor_count(value) <= divisor_limit
    i += 1
    value = i * (i + 1)/2
  end
  return value
end

def divisor_count(number)
  return 1 if number == 1
  return 2 if number == 3
  div = 2
  primes = Hash.new(0)

  #prime factorization of the number
  while number >= div ** 2
    if number % div == 0
      number /= div
      primes[div] += 1
      primes[number] += 1 if is_prime?(number)
    else
      div += 1
    end
  end

  count = 1
  primes.each do |key, value|
    count *= (value + 1)
  end
  return count
end

def is_prime?(x)
  return true if x == 2 || x == 3
  return false if x % 2 == 0 || x % 3 == 0
  limit = (x ** (1/2.0)).to_i
  i = 1
  a = 6*i - 1
  b = 6*i + 1

  while a <= limit || b <= limit
    return false if x % a == 0 || x % b == 0
    i += 1
    a = 6*i - 1
    b = 6*i + 1
  end

  return true
end

puts find_trinum(500)
