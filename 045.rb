# Triangular, pentagonal, and hexagonal

=begin

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

=end

=begin

  Alright, so there's 2 way to do this:
  1. Using tests to determine if a number is triangular, pentagonal, and hexagonal.
  2. Generating each type of sequence beforehand, and then finding the common numbers amongst the 3 sequences.

  Tried #1, it takes years to complete, so went with way 2. Pretty much it.

  Everything below is the written explanation of attempt #1, which explains the commented source code above the final solution.
  -----------------------------------------------------------------------------
  Tests for (determined by finding inverse of the given functions):

  Triangular numbers:
  T = ((1 + 8 * n)^(1/2) - 1 )/ 2
  Pentagonal numbers:
  P = ((1 + 24 * n)^(1/2) - 1) / 6
  Hexagonal numbers:
  H = ((1 + 8 * n)^(1/2) - 1)/ 4

  The result of the above tests are satisfied if the result is a natural number (after plugging in n).

  Strategy: use the above test functions to see if they are natural numbers. If a number satisfies all 3 tests this way, then it must be triangular, pentagonal, and hexagonal.

=end

=begin
def tph(limit)
  (1..limit).each do |x|
    puts x if pentagonal?(x) && hexagonal?(x) && triangular?(x)
  end
end

#checks if number is triangular
def triangular?(num)
  return (1 + (8 * num + 1) ** (0.5)) / 2.0 % 1.0 == 0.0
end

#checks if number is pentagonal from problem 44
def pentagonal?(num)
  return (1 + (24 * num + 1) ** (0.5)) / 6.0 % 1.0 == 0.0
end

#checks if number is hexagonal
def hexagonal?(num)
  return (1 + (8 * num + 1) ** (0.5)) / 4.0 % 1.0 == 0.0
end

tph(1000000000)
=end

def tph
  limit = 100000
  tri = triangle_sequence(limit)
  pent = pentagon_sequence(limit)
  hex = hexagon_sequence(limit)
  puts tri & pent & hex
end

#generates triangle number sequence from problem 42
def triangle_sequence(nth)
  sequence = []
  (1..nth).each do |x|
    sequence.push( x * (x + 1) / 2 )
  end
  return sequence
end

#generates pentagonal number sequence from problem 44
def pentagon_sequence(nth)
  sequence = []
  (1..nth).each do |n|
    sequence.push( n * (3 * n - 1) / 2 )
  end
  return sequence
end

def hexagon_sequence(nth)
  sequence = []
  (1..nth).each do |n|
    sequence.push( n * ( 2 * n - 1 ) )
  end
  return sequence
end

tph
